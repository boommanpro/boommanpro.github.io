<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://boommanpro.cn/</id>
    <title>BoomMan</title>
    <updated>2021-07-02T14:03:43.455Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://boommanpro.cn/"/>
    <link rel="self" href="https://boommanpro.cn/atom.xml"/>
    <subtitle>爱生活 , 爱Coding .....</subtitle>
    <logo>https://boommanpro.cn/images/avatar.png</logo>
    <icon>https://boommanpro.cn/favicon.ico</icon>
    <rights>All rights reserved 2021, BoomMan</rights>
    <entry>
        <title type="html"><![CDATA[2021年6月生活小结]]></title>
        <id>https://boommanpro.cn/post/2021-06-log/</id>
        <link href="https://boommanpro.cn/post/2021-06-log/">
        </link>
        <updated>2021-07-02T13:54:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="工作小结">工作小结</h2>
<p>参加公司的萌芽计划，收获多多。<br>
进一步了解公司项目。</p>
<p>继续努力吧！！！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021年5月生活小结]]></title>
        <id>https://boommanpro.cn/post/2021-05-log/</id>
        <link href="https://boommanpro.cn/post/2021-05-log/">
        </link>
        <updated>2021-06-01T12:58:06.000Z</updated>
        <content type="html"><![CDATA[<h2 id="生活小结">生活小结</h2>
<p>本月完成了离职，入职，感慨时间过的真快 !</p>
<p>记录下一些换工作的注意事项吧！</p>
<ol>
<li>换工作还是要早做打算(比如提前2-3月复习，1个月找)，避免想走走不了，走时不是黄金期，无法battle的情况。</li>
<li>离职后的离职证明自己要保存一份电子版(因为证明在入职新单位就会交，但是之后的一些证明又需要，比如工作居住证转移)</li>
<li>社保公积金等转移(尽量在本单位15号后离职，下个单位15号前入职)，这样就可以完成无缝衔接。</li>
<li><a href="http://www.bjrcgz.gov.cn/">北京工作居住证</a>转移需要注意目标单位可以接收，并且在入职后尽快(1-2天)办理相关事项，因为中间还需要再次审批，防止出现差错。</li>
</ol>
<h2 id="工作小结">工作小结</h2>
<p>开水团的生活还是不错的，有兴趣可以找我内推哈。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021年4月生活小结]]></title>
        <id>https://boommanpro.cn/post/2021-04-log/</id>
        <link href="https://boommanpro.cn/post/2021-04-log/">
        </link>
        <updated>2021-04-29T03:41:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="生活小结">生活小结</h2>
<p>本次屋子里又新增了智能开关，用于声控(小度音箱)控制卧室和客厅的灯，客服小哥哥nice，电路拍照就行，贼专业。</p>
<figure data-type="image" tabindex="1"><img src="https://boommanpro.cn//post-images/1619667786274.jpg" alt="" loading="lazy"></figure>
<p>我的电脑桌上增添饮水机，淘宝买怡宝大桶水就行了。终于可以在家方便喝热水了。后悔系列，没有早买。</p>
<figure data-type="image" tabindex="2"><img src="https://boommanpro.cn//post-images/1619667946227.jpg" alt="" loading="lazy"></figure>
<h2 id="工作小结">工作小结</h2>
<p>本次换工作成功，下个月就去新公司了，干就完事了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于一些编程书籍推荐]]></title>
        <id>https://boommanpro.cn/post/book/</id>
        <link href="https://boommanpro.cn/post/book/">
        </link>
        <updated>2021-04-24T14:22:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="http">HTTP</h2>
<p>图解HTTP</p>
<h2 id="linux">Linux</h2>
<p>Linux命令行与Shell脚本编程大全</p>
<p>Linux私房菜</p>
<h2 id="java">Java</h2>
<p>深入理解JVM虚拟机</p>
<p>Java核心技术 卷I</p>
<p>Java核心技术 卷II</p>
<p>Java 高并发编程详解</p>
<p>Spring Boot 编程思想</p>
<p>Netty实战</p>
<p>Redis实战</p>
<h2 id="mysql">MySQL</h2>
<p>高性能MySQL</p>
<h2 id="算法">算法</h2>
<p>编程之美 - 微软技术面试心得</p>
<h2 id="javascript">JavaScript</h2>
<p>高级程序设计 JavaScript</p>
<h2 id="设计模式">设计模式</h2>
<p>大话设计模式</p>
<h2 id="cicd">CICD</h2>
<p>Jenkins2 权威指南</p>
<h2 id="码出高效">码出高效</h2>
<p>码出高效 Java开发手册</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021年3月生活小结]]></title>
        <id>https://boommanpro.cn/post/2021-03-log/</id>
        <link href="https://boommanpro.cn/post/2021-03-log/">
        </link>
        <updated>2021-03-28T03:32:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="简单小结">简单小结</h2>
<p>简单记录下3月的有趣事,背景三月去成都转悠了一圈，去熊猫基地看熊猫。晚上在酒店点冷吃兔外卖。</p>
<p>成都的酒店现在都是机器人送餐，然后下单冷吃兔后等待外卖送达，在超时了10分钟后，外卖小哥联系到我，说外卖送达，酒店机器人会送到，随即点了送达。又等了10分钟后，外卖还未到，我便打电话问前台情况，又上楼找外卖，在寻找中又问外卖小哥是否送了，他说机器人可能忙，一会就到。就在这时。。我在电梯口碰上了外卖小哥，拿着我的外卖，尴尬一笑。</p>
<p>程序是不会骗人的，程序员是会骗人的。</p>
<p>外卖机器人背锅。</p>
<p><img src="https://boommanpro.cn//post-images/1619667630508.jpg" alt="" loading="lazy"><br>
<img src="https://boommanpro.cn//post-images/1619667633265.jpg" alt="" loading="lazy"><br>
<img src="https://boommanpro.cn//post-images/1619667635927.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021年1月生活小结]]></title>
        <id>https://boommanpro.cn/post/2021-01-log/</id>
        <link href="https://boommanpro.cn/post/2021-01-log/">
        </link>
        <updated>2021-01-23T09:36:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="简单小结">简单小结</h2>
<p><img src="https://boommanpro.cn//post-images/1611395077323.jpg" alt="" loading="lazy"><br>
<img src="https://boommanpro.cn//post-images/1611394733635.jpg" alt="" loading="lazy"></p>
<p>在1月中旬结束了长时间的出差，暂时撤场回到北京，与我的宝宝一起上下班，好开心😀.</p>
<h2 id="技术小结">技术小结</h2>
<p>编写技术博客 3篇，并且对2021年做了flag，希望2021年好好努力</p>
<p><a href="/post/spring-boot-devtools-error/">spring-boot-devtools 使用引发的一系列问题</a><br>
<a href="/post/spring-boot-external-config/">Spring Boot 2.4 外部化配置的改变</a><br>
<a href="/post/window-tcp-update/">Window Tcp 数据篡改</a><br>
<a href="/post/2021-flag/">2021-flag</a></p>
<p>对golang项目中的frp和goreplay源码的第1-3次提交进行了学习，学习了cobra命令行框架</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Window Tcp 数据篡改]]></title>
        <id>https://boommanpro.cn/post/window-tcp-update/</id>
        <link href="https://boommanpro.cn/post/window-tcp-update/">
        </link>
        <updated>2021-01-07T09:53:28.000Z</updated>
        <content type="html"><![CDATA[<h1 id="背景">背景</h1>
<p>什么时候需要修改TCP传输的数据 ? 如果我们知道TCP中的数据,并且可以修改,可以做什么 ?</p>
<p>TCP数据修改思路:</p>
<ol>
<li>Windows平台 Winsock api 替换本机ddl</li>
<li>Linux平台 netfilter 库</li>
<li>通用 代理中间人攻击</li>
</ol>
<p>常见工具:</p>
<ol>
<li>WPE三剑客</li>
<li>HookMe</li>
<li>基于winsock的一系列工具</li>
</ol>
<p>因个人对dll等不熟悉,netfilter尝试失败等原因,遂采用代理中间人方式。</p>
<p>但是了解tcp的都应该知道,tcp和http传输消息不同的是，tcp的包中只有源信息和目的信息,而http的应用层中包含了目的服务的信息。那么如果修改目的信息为中间人服务，那么原本的目的信息去哪里了?</p>
<p>这里可以采用别人开发好的socks5代理服务，它基于dll代理，与中间人服务器建立连接，建立连接成功后，并且发送一个tcp包，里面包含了原始信息包。这样socks5服务器就有了中间人的条件。</p>
<p>客户端主机 &lt;=&gt; 代理服务器  &lt;=&gt; 目标服务器</p>
<h2 id="修改逻辑">修改逻辑</h2>
<p>以golang代码为例</p>
<pre><code>func proxy(dst io.Writer, src io.Reader, lead bool, errCh chan error) {
	//这块使用的copy
	var err error
	//发送的规则
	if lead {
		//src是请求信息
		// 问题是如何解密封包中的含义是什么,然后就可以编码修改发送和返回
		bufReq := bufio.NewReader(src)
		for ; ; {
			//需要将发送指令接收到，然后重写 发送到服务端
			var buf [128]byte
			n ,_:=bufReq.Read(buf[:])
			fmt.Printf(&quot;接收到实际客户端消息%s&quot;,string(buf[:n]))

			dst.Write(([]byte)(string(buf[:n])+&quot;1&quot;))
		}
	} else {
		//接受的规则
		_, err = io.Copy(dst, src)
	}

	if tcpConn, ok := dst.(closeWriter); ok {
		tcpConn.CloseWrite()
	}
	errCh &lt;- err
}

</code></pre>
<p>假设tcp中的消息都是明文，且单个消息小于等于128，这样修改逻辑就完成的。当然具体需要和实际结合。</p>
<p>消息修改，并且没有问题，需要严格遵守服务端消息格式，加密解密，盐值，序号等。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Boot 2.4 外部化配置的改变]]></title>
        <id>https://boommanpro.cn/post/spring-boot-external-config/</id>
        <link href="https://boommanpro.cn/post/spring-boot-external-config/">
        </link>
        <updated>2021-01-04T03:15:15.000Z</updated>
        <content type="html"><![CDATA[<h2 id="official-guide">Official Guide</h2>
<p><a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-Config-Data-Migration-Guide">官方升级指南</a></p>
<p>熟悉外部化配置的同学应该知道，我们获取属性都是从 Bean =&gt; Environment中获取的，所以我们打印 Standard的getPropertySources()即可知道</p>
<h2 id="同样是外部化配置-springprofilesactivedev">同样是外部化配置 spring.profiles.active=dev</h2>
<p>2.3.5.RELEASE</p>
<figure data-type="image" tabindex="1"><img src="https://boommanpro.cn//post-images/1609730299381.png" alt="" loading="lazy"></figure>
<p>2.4.1</p>
<figure data-type="image" tabindex="2"><img src="https://boommanpro.cn//post-images/1609730341477.png" alt="" loading="lazy"></figure>
<h2 id="为什么做了如此改变">为什么做了如此改变</h2>
<p>官方issue : <a href="https://github.com/spring-projects/spring-boot/issues/2404">#2404</a> =&gt;<a href="https://github.com/spring-projects/spring-boot/issues/3845">#3845</a></p>
<p>即可了解到 =&gt;<br>
2.4之前 =&gt; 即时我们采用外部化配置，也会有困惑,貌似外部化配置不生效的问题，因为他是按照外部化 dev =&gt; 内部 dev ,外部default,内部 default 这样加载</p>
<p>2.4之后 =&gt; 按照之前顺序 先加载外部化 file,再加载内部的classpath文件. 这样只要外面配置了文件就一定会覆盖内部的，会生效。</p>
<h2 id="24的外部化配置还有哪些">2.4的外部化配置还有哪些 ?</h2>
<p>增加了组概念<br>
增加了对容器化等支持<br>
增加了方便的import 导入其他配置文件到environment 之间我们做过类似的事情 =&gt; <a href="https://boommanpro.cn/post/spring-boot-enableConfigurationProperties/">让@EnableConfigurationProperties的值注入到@Value中</a></p>
<h2 id="本质上代码是怎么改的">本质上代码是怎么改的 ?</h2>
<p>原本的配置文件加载类 <code>ConfigFileApplicationListener</code>标记了@Deprecated  favor of =&gt; <code>org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor</code> =&gt; <code>org.springframework.boot.context.config.ConfigDataEnvironment</code></p>
<p>这样就改变了加载策略，从而减少使用困惑(明明配置了外部化文件，为什么会不生效呢?)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[spring-boot-devtools 使用引发的一系列问题]]></title>
        <id>https://boommanpro.cn/post/spring-boot-devtools-error/</id>
        <link href="https://boommanpro.cn/post/spring-boot-devtools-error/">
        </link>
        <updated>2021-01-03T09:02:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="背景">背景</h2>
<p>在看 gitee的一个开源项目 =&gt; <a href="https://gitee.com/huanzi-qch/base-admin.git">gitee-base-admin</a> 的时候,发现其中的项目日志通过websocket推送到客户端挺有意义的.个人项目可以加上这个小功能。</p>
<p>但是 其实现是每个用户都新建线程去推日志, 线程数和用户数 1:1. 并且无法对集群日志监听.遂想实现更通用(优雅)的方法实现</p>
<h2 id="改写思路">改写思路</h2>
<ol>
<li>将原本的读取本地日志文件 =&gt; logging的append机制 =&gt; append 多份 =&gt; 追加一份到自定义的 Appender</li>
<li>Appender将消息写入到Dispatcher中进行分发处理</li>
<li>将Dispatcher抽象为接口,做多份实现 以满足 单机基于内存的,集群基于mq中间件的情况</li>
<li>将用户的websocket上下线推送 =&gt; 缓存n行(CircularFifoQueue)做首次推送,其他的消息做轮询用户推送,可以异步化防止单条消息阻塞时间长的问题。 新用户推送需要注意防止消息丢失问题</li>
<li>coding</li>
</ol>
<h2 id="坑点出现了">坑点出现了</h2>
<p>在项目启动的时候,启动没有报错，就是没有新消息过来，但是append也写入消息，但是就是取不到消息可以进行消费,后发现两个Dispatcher不是一个实例，饿汉式的单例失效了? 竟然不是一个类加载器?</p>
<p>原因如下:</p>
<p><code>spring-boot-devtools</code> 对项目的代码是 RestartClassLoader,jar包的代码则是App,又因为我们是通过logback构造的append,所以就算是项目的代码，构造方式，或者流程不一，导致类加载器不一样，最终体现在单例不是单例了。</p>
<p>怎么解决呢? 不用devtools即可 !!! 或者百度dev-tools 配置 or jrebl不香吗</p>
<h2 id="编写过程中的注意点">编写过程中的注意点</h2>
<p>因为logging的优先级问题,所以不能采用bean的方式构造,我采用的是java spi机制实现多环境切换</p>
<h2 id="classloader">ClassLoader</h2>
<ol>
<li>jar包隔离</li>
<li>动态debug</li>
</ol>
<p>加载类实例的几种方式 ?</p>
<ol>
<li>Class.forName</li>
<li>new</li>
<li>ClassLoader.loadClass</li>
<li>other 一些序列化什么的</li>
<li>spi =&gt; ServiceLoader</li>
</ol>
<h2 id="classloader-一些点">ClassLoader 一些点</h2>
<ol>
<li>ClassLoader.loadClass 类加载器和当前加载的Class不一致时 会导致</li>
</ol>
<pre><code class="language-java">com.boommanpro.Parent cannot be cast to com.boommanpro.Parent
</code></pre>
<ol>
<li>
<p>new 方式使用的是当前代码所在类加载器加载，而不是调用当前代码的代码所在类加载器加载</p>
</li>
<li>
<p>Class.forName运作时，通过Reflection.getCallerClass()，能够获取是谁调用了Class.forName，最终还是和new 一致性</p>
</li>
<li>
<p>代码 Class有类加载器,线程有类加载器 ServiceLoader用线程的</p>
</li>
</ol>
<h2 id="什么时候类会被加载">什么时候类会被加载</h2>
<p>参照 <a href="https://www.cnblogs.com/zhixie/p/11766080.html">java类在何时被加载</a></p>
<p>说明了以下几种方式</p>
<ol>
<li>main类</li>
<li>创建类的实例 new创建子类的实例</li>
<li>访问类的静态方法</li>
<li>访问类的静态变量</li>
<li>反射</li>
</ol>
<p>补充两点:</p>
<ol start="6">
<li>cast -&gt;       Object o = new Object(); Parent o2 = (Parent) o; 本质是 Parent.class.cast(o);</li>
<li>instanceof   =&gt;  <code>java.lang.Class#isInstance</code></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[分布式id服务 tinyId源码学习]]></title>
        <id>https://boommanpro.cn/post/tinyid/</id>
        <link href="https://boommanpro.cn/post/tinyid/">
        </link>
        <updated>2020-12-28T06:26:59.000Z</updated>
        <content type="html"><![CDATA[<h2 id="背景">背景</h2>
<p>我们大致了解常见分布式id有9种解决方案如下:</p>
<ol>
<li>Redis自增id</li>
<li>UUID</li>
<li>数据库id</li>
<li>多主数据库id</li>
<li>分段id</li>
<li>snowflake</li>
<li>基于snowflake的百度 uid-generator</li>
<li>基于snowflake的美团 leaf</li>
<li>滴滴的分段 tinyId</li>
</ol>
<p>基于高可用,高性能,简单易用性,使用tinyId和学习tinyId源码.<br>
<code>关于tinyid，并不是滴滴官方产品，只是滴滴拥有的代码。</code></p>
<p><a href="https://github.com/didi/tinyid/wiki">tinyId-官方wiki</a></p>
<p><img src="https://boommanpro.cn//post-images/1609137839166.png" alt="" loading="lazy"><br>
代码行数统计<br>
<img src="https://boommanpro.cn//post-images/1609137842127.png" alt="" loading="lazy"></p>
<h2 id="简单使用">简单使用</h2>
<pre><code class="language-shell">
## git原版
git clone https://github.com/didi/tinyid.git

## cnpmjs 加速版本
git clone https://github.com.cnpmjs.org/didi/tinyid.git

</code></pre>
<h2 id="源码分析点">源码分析点</h2>
<ol>
<li>项目模块 <code>tinyid-base</code>  <code>tinyid-client</code> <code>tinyid-server</code> 之间的关系</li>
</ol>
<pre><code>tinyid-base 
1. SegmentId 中定义了号段核心实体，用于获取nextId()
2. 定义公用的 IdGeneratorFactory,IdGenerator,SegmentIdService 接口，让client和server实现其各自方法。

tinyid-server 是部署分布式id服务的

tinyid-server是java client,需要自己install到本地,官方没有发布到maven仓库
</code></pre>
<ol start="2">
<li>client IdGenerator 是如何保证高性能,高可用的</li>
</ol>
<pre><code>1. 高性能,不论调用的是nextId还是batch方法,本质是在本地生成的,如果超出了本地生成策略。去服务器获取Segment段的长度. 不必每次发送http请求获取。
2. 高可用,客户端在resource配置 tinyid_client.properties文件,其参数 tinyid.server =&gt;
#(tinyid.server=localhost:9999/gateway,ip2:port2/prefix,...)  用逗号分隔,达到负载均衡的效果。
详情可看源码 com.xiaoju.uemc.tinyid.client.factory.impl.IdGeneratorFactoryClient#init
当获取新的segment时会choose,算法是 random

</code></pre>
<ol start="3">
<li>服务器如何搭建集群</li>
</ol>
<pre><code>为了防止服务端挂掉产生的单点问题。导致服务不可用,遂需要搭建集群，直接搭建多节点就行。

关于mysql的多主数据源问题=&gt; com.xiaoju.uemc.tinyid.base.entity.SegmentId#init

如果你有多个数据源达到数据库的高可用,需要配置数据库 delta=数据库个数
remainder 从0按顺序递增

</code></pre>
<pre><code class="language-java">
    /**
     * 这个方法主要为了1,4,7,10...这种序列准备的
     * 设置好初始值之后，会以delta的方式递增，保证无论开始id是多少都能生成正确的序列
     * 如当前是号段是(1000,2000]，delta=3, remainder=0，则经过这个方法后，currentId会先递增到1002,之后每次增加delta
     * 因为currentId会先递增，所以会浪费一个id，所以做了一次减delta的操作，实际currentId会从999开始增，第一个id还是1002
     */
    public void init() {
        if (isInit) {
            return;
        }
        synchronized (this) {
            if (isInit) {
                return;
            }
            long id = currentId.get();
            if (id % delta == remainder) {
                isInit = true;
                return;
            }
            for (int i = 0; i &lt;= delta; i++) {
                id = currentId.incrementAndGet();
                if (id % delta == remainder) {
                    // 避免浪费 减掉系统自己占用的一个id
                    currentId.addAndGet(0 - delta);
                    isInit = true;
                    return;
                }
            }
        }
    }
</code></pre>
<ol start="4">
<li><code>tinyid-server</code>  中是如何建立多数据源的</li>
</ol>
<pre><code>核心是 =&gt; org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource

在读取envionment配置时,没见过的一个用法是 RelaxedPropertyResolver,可以根据前缀获取信息
</code></pre>
<ol start="5">
<li><code>tinyid-server</code>的maven profiles配置学习</li>
</ol>
<pre><code>    &lt;profiles&gt;
        &lt;profile&gt;
            &lt;id&gt;online&lt;/id&gt;
            &lt;properties&gt;
                &lt;package.environment&gt;online&lt;/package.environment&gt;
            &lt;/properties&gt;
        &lt;/profile&gt;
        &lt;profile&gt;
            &lt;id&gt;offline&lt;/id&gt;
            &lt;activation&gt;
                &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
            &lt;/activation&gt;
            &lt;properties&gt;
                &lt;package.environment&gt;offline&lt;/package.environment&gt;
            &lt;/properties&gt;
        &lt;/profile&gt;
    &lt;/profiles&gt;

    
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${spring.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;repackage&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
        &lt;resources&gt;
            &lt;resource&gt;
                &lt;directory&gt;src/main/resources/${package.environment}&lt;/directory&gt;
            &lt;/resource&gt;
            &lt;resource&gt;
                &lt;directory&gt;src/main/resources/base&lt;/directory&gt;
            &lt;/resource&gt;
        &lt;/resources&gt;
    &lt;/build&gt;

</code></pre>
<p>不过貌似一般不这么用<sub>V</sub></p>
]]></content>
    </entry>
</feed>