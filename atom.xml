<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://boommanpro.cn/</id>
    <title>BoomMan</title>
    <updated>2021-07-29T14:26:35.051Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://boommanpro.cn/"/>
    <link rel="self" href="https://boommanpro.cn/atom.xml"/>
    <subtitle>爱生活 , 爱Coding .....</subtitle>
    <logo>https://boommanpro.cn/images/avatar.png</logo>
    <icon>https://boommanpro.cn/favicon.ico</icon>
    <rights>All rights reserved 2021, BoomMan</rights>
    <entry>
        <title type="html"><![CDATA[javaparser-mvn-plugin开发]]></title>
        <id>https://boommanpro.cn/post/javaparser-mvn-plugin/</id>
        <link href="https://boommanpro.cn/post/javaparser-mvn-plugin/">
        </link>
        <updated>2021-07-29T14:20:27.000Z</updated>
        <content type="html"><![CDATA[<h2 id="背景">背景</h2>
<p>之前有些过 <a href="https://boommanpro.cn/post/java-parser/">Java类注释解析</a>说明了类注释解析的需求、那么将其开发为mvn-plugin就顺利成章，分享给大家。</p>
<p>cool-demo是一个maven插件的入门教程、利用javaparser-core的parse能力及maven的生命周期能力。</p>
<ol>
<li>读取.java文件的注释内容、并处理。</li>
<li>在maven-initialize阶段将内容写入到项目的resource目录下。</li>
</ol>
<p>这样就可以将代码中的注释通过项目能力做自己想要的事，并且和maven的构建结合起来，有效的和CI/CD结合。</p>
<p>开源地址: <a href="https://github.com/BoomManPro/cool-demo">https://github.com/BoomManPro/cool-demo</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows 《塞尔达传说:旷野之息》 + 良值手柄]]></title>
        <id>https://boommanpro.cn/post/windows-lesslesssai-er-da-chuan-shuo-kuang-ye-zhi-xi-greatergreater-liang-zhi-shou-bing/</id>
        <link href="https://boommanpro.cn/post/windows-lesslesssai-er-da-chuan-shuo-kuang-ye-zhi-xi-greatergreater-liang-zhi-shou-bing/">
        </link>
        <updated>2021-07-04T14:08:22.000Z</updated>
        <content type="html"><![CDATA[<h2 id="准备工作">准备工作</h2>
<ol>
<li>Window电脑 配置要求 3.0主频以上+16G内存 750Ti以上显卡</li>
<li>游戏手柄 良值二代 switch手柄即可 PDD 120+  (房子键+Y键)</li>
<li>《塞尔达传说:旷野之息》 Cemu下载  吾爱上搜索全集即可</li>
<li>蓝牙连接手柄  + 陀螺仪驱动 <a href="https://github.com/Davidobot/BetterJoy">BetterJoyForCemu</a></li>
</ol>
<h2 id="相关坑点">相关坑点</h2>
<ol>
<li>蓝牙连接部分。连接后又迅速断开，说明驱动安装失败，需要卸载，清空缓存重装。</li>
<li>BetterJoyForCemu需要安装相关驱动，每次游戏启动都要启动。</li>
<li>如果出现陀螺仪飘动，需要校准，可能每次玩都需要校准。</li>
</ol>
<p>Happy Time !!!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021年6月生活小结]]></title>
        <id>https://boommanpro.cn/post/2021-06-log/</id>
        <link href="https://boommanpro.cn/post/2021-06-log/">
        </link>
        <updated>2021-07-02T13:54:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="工作小结">工作小结</h2>
<p>参加公司的萌芽计划，收获多多。<br>
进一步了解公司项目。</p>
<p>貌似这个月过得太快了，一直在努力工作，不会的可太多了啊</p>
<p>7月同上、需求逐渐增多。</p>
<h2 id="其他">其他</h2>
<p>准备写一篇 Windows Cemu的塞尔达教程</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021年5月生活小结]]></title>
        <id>https://boommanpro.cn/post/2021-05-log/</id>
        <link href="https://boommanpro.cn/post/2021-05-log/">
        </link>
        <updated>2021-06-01T12:58:06.000Z</updated>
        <content type="html"><![CDATA[<h2 id="生活小结">生活小结</h2>
<p>本月完成了离职，入职，感慨时间过的真快 !</p>
<p>记录下一些换工作的注意事项吧！</p>
<ol>
<li>换工作还是要早做打算(比如提前2-3月复习，1个月找)，避免想走走不了，走时不是黄金期，无法battle的情况。</li>
<li>离职后的离职证明自己要保存一份电子版(因为证明在入职新单位就会交，但是之后的一些证明又需要，比如工作居住证转移)</li>
<li>社保公积金等转移(尽量在本单位15号后离职，下个单位15号前入职)，这样就可以完成无缝衔接。</li>
<li><a href="http://www.bjrcgz.gov.cn/">北京工作居住证</a>转移需要注意目标单位可以接收，并且在入职后尽快(1-2天)办理相关事项，因为中间还需要再次审批，防止出现差错。</li>
</ol>
<h2 id="工作小结">工作小结</h2>
<p>开水团的生活还是不错的，有兴趣可以找我内推哈。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021年4月生活小结]]></title>
        <id>https://boommanpro.cn/post/2021-04-log/</id>
        <link href="https://boommanpro.cn/post/2021-04-log/">
        </link>
        <updated>2021-04-29T03:41:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="生活小结">生活小结</h2>
<p>本次屋子里又新增了智能开关，用于声控(小度音箱)控制卧室和客厅的灯，客服小哥哥nice，电路拍照就行，贼专业。</p>
<figure data-type="image" tabindex="1"><img src="https://boommanpro.cn//post-images/1619667786274.jpg" alt="" loading="lazy"></figure>
<p>我的电脑桌上增添饮水机，淘宝买怡宝大桶水就行了。终于可以在家方便喝热水了。后悔系列，没有早买。</p>
<figure data-type="image" tabindex="2"><img src="https://boommanpro.cn//post-images/1619667946227.jpg" alt="" loading="lazy"></figure>
<h2 id="工作小结">工作小结</h2>
<p>本次换工作成功，下个月就去新公司了，干就完事了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于一些编程书籍推荐]]></title>
        <id>https://boommanpro.cn/post/book/</id>
        <link href="https://boommanpro.cn/post/book/">
        </link>
        <updated>2021-04-24T14:22:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="http">HTTP</h2>
<p>图解HTTP</p>
<h2 id="linux">Linux</h2>
<p>Linux命令行与Shell脚本编程大全</p>
<p>Linux私房菜</p>
<h2 id="java">Java</h2>
<p>深入理解JVM虚拟机</p>
<p>Java核心技术 卷I</p>
<p>Java核心技术 卷II</p>
<p>Java 高并发编程详解</p>
<p>Spring Boot 编程思想</p>
<p>Netty实战</p>
<p>Redis实战</p>
<h2 id="mysql">MySQL</h2>
<p>高性能MySQL</p>
<h2 id="算法">算法</h2>
<p>编程之美 - 微软技术面试心得</p>
<h2 id="javascript">JavaScript</h2>
<p>高级程序设计 JavaScript</p>
<h2 id="设计模式">设计模式</h2>
<p>大话设计模式</p>
<h2 id="cicd">CICD</h2>
<p>Jenkins2 权威指南</p>
<h2 id="码出高效">码出高效</h2>
<p>码出高效 Java开发手册</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021年3月生活小结]]></title>
        <id>https://boommanpro.cn/post/2021-03-log/</id>
        <link href="https://boommanpro.cn/post/2021-03-log/">
        </link>
        <updated>2021-03-28T03:32:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="简单小结">简单小结</h2>
<p>简单记录下3月的有趣事,背景三月去成都转悠了一圈，去熊猫基地看熊猫。晚上在酒店点冷吃兔外卖。</p>
<p>成都的酒店现在都是机器人送餐，然后下单冷吃兔后等待外卖送达，在超时了10分钟后，外卖小哥联系到我，说外卖送达，酒店机器人会送到，随即点了送达。又等了10分钟后，外卖还未到，我便打电话问前台情况，又上楼找外卖，在寻找中又问外卖小哥是否送了，他说机器人可能忙，一会就到。就在这时。。我在电梯口碰上了外卖小哥，拿着我的外卖，尴尬一笑。</p>
<p>程序是不会骗人的，程序员是会骗人的。</p>
<p>外卖机器人背锅。</p>
<p><img src="https://boommanpro.cn//post-images/1619667630508.jpg" alt="" loading="lazy"><br>
<img src="https://boommanpro.cn//post-images/1619667633265.jpg" alt="" loading="lazy"><br>
<img src="https://boommanpro.cn//post-images/1619667635927.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021年1月生活小结]]></title>
        <id>https://boommanpro.cn/post/2021-01-log/</id>
        <link href="https://boommanpro.cn/post/2021-01-log/">
        </link>
        <updated>2021-01-23T09:36:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="简单小结">简单小结</h2>
<p><img src="https://boommanpro.cn//post-images/1611395077323.jpg" alt="" loading="lazy"><br>
<img src="https://boommanpro.cn//post-images/1611394733635.jpg" alt="" loading="lazy"></p>
<p>在1月中旬结束了长时间的出差，暂时撤场回到北京，与我的宝宝一起上下班，好开心😀.</p>
<h2 id="技术小结">技术小结</h2>
<p>编写技术博客 3篇，并且对2021年做了flag，希望2021年好好努力</p>
<p><a href="/post/spring-boot-devtools-error/">spring-boot-devtools 使用引发的一系列问题</a><br>
<a href="/post/spring-boot-external-config/">Spring Boot 2.4 外部化配置的改变</a><br>
<a href="/post/window-tcp-update/">Window Tcp 数据篡改</a><br>
<a href="/post/2021-flag/">2021-flag</a></p>
<p>对golang项目中的frp和goreplay源码的第1-3次提交进行了学习，学习了cobra命令行框架</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Window Tcp 数据篡改]]></title>
        <id>https://boommanpro.cn/post/window-tcp-update/</id>
        <link href="https://boommanpro.cn/post/window-tcp-update/">
        </link>
        <updated>2021-01-07T09:53:28.000Z</updated>
        <content type="html"><![CDATA[<h1 id="背景">背景</h1>
<p>什么时候需要修改TCP传输的数据 ? 如果我们知道TCP中的数据,并且可以修改,可以做什么 ?</p>
<p>TCP数据修改思路:</p>
<ol>
<li>Windows平台 Winsock api 替换本机ddl</li>
<li>Linux平台 netfilter 库</li>
<li>通用 代理中间人攻击</li>
</ol>
<p>常见工具:</p>
<ol>
<li>WPE三剑客</li>
<li>HookMe</li>
<li>基于winsock的一系列工具</li>
</ol>
<p>因个人对dll等不熟悉,netfilter尝试失败等原因,遂采用代理中间人方式。</p>
<p>但是了解tcp的都应该知道,tcp和http传输消息不同的是，tcp的包中只有源信息和目的信息,而http的应用层中包含了目的服务的信息。那么如果修改目的信息为中间人服务，那么原本的目的信息去哪里了?</p>
<p>这里可以采用别人开发好的socks5代理服务，它基于dll代理，与中间人服务器建立连接，建立连接成功后，并且发送一个tcp包，里面包含了原始信息包。这样socks5服务器就有了中间人的条件。</p>
<p>客户端主机 &lt;=&gt; 代理服务器  &lt;=&gt; 目标服务器</p>
<h2 id="修改逻辑">修改逻辑</h2>
<p>以golang代码为例</p>
<pre><code>func proxy(dst io.Writer, src io.Reader, lead bool, errCh chan error) {
	//这块使用的copy
	var err error
	//发送的规则
	if lead {
		//src是请求信息
		// 问题是如何解密封包中的含义是什么,然后就可以编码修改发送和返回
		bufReq := bufio.NewReader(src)
		for ; ; {
			//需要将发送指令接收到，然后重写 发送到服务端
			var buf [128]byte
			n ,_:=bufReq.Read(buf[:])
			fmt.Printf(&quot;接收到实际客户端消息%s&quot;,string(buf[:n]))

			dst.Write(([]byte)(string(buf[:n])+&quot;1&quot;))
		}
	} else {
		//接受的规则
		_, err = io.Copy(dst, src)
	}

	if tcpConn, ok := dst.(closeWriter); ok {
		tcpConn.CloseWrite()
	}
	errCh &lt;- err
}

</code></pre>
<p>假设tcp中的消息都是明文，且单个消息小于等于128，这样修改逻辑就完成的。当然具体需要和实际结合。</p>
<p>消息修改，并且没有问题，需要严格遵守服务端消息格式，加密解密，盐值，序号等。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Boot 2.4 外部化配置的改变]]></title>
        <id>https://boommanpro.cn/post/spring-boot-external-config/</id>
        <link href="https://boommanpro.cn/post/spring-boot-external-config/">
        </link>
        <updated>2021-01-04T03:15:15.000Z</updated>
        <content type="html"><![CDATA[<h2 id="official-guide">Official Guide</h2>
<p><a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-Config-Data-Migration-Guide">官方升级指南</a></p>
<p>熟悉外部化配置的同学应该知道，我们获取属性都是从 Bean =&gt; Environment中获取的，所以我们打印 Standard的getPropertySources()即可知道</p>
<h2 id="同样是外部化配置-springprofilesactivedev">同样是外部化配置 spring.profiles.active=dev</h2>
<p>2.3.5.RELEASE</p>
<figure data-type="image" tabindex="1"><img src="https://boommanpro.cn//post-images/1609730299381.png" alt="" loading="lazy"></figure>
<p>2.4.1</p>
<figure data-type="image" tabindex="2"><img src="https://boommanpro.cn//post-images/1609730341477.png" alt="" loading="lazy"></figure>
<h2 id="为什么做了如此改变">为什么做了如此改变</h2>
<p>官方issue : <a href="https://github.com/spring-projects/spring-boot/issues/2404">#2404</a> =&gt;<a href="https://github.com/spring-projects/spring-boot/issues/3845">#3845</a></p>
<p>即可了解到 =&gt;<br>
2.4之前 =&gt; 即时我们采用外部化配置，也会有困惑,貌似外部化配置不生效的问题，因为他是按照外部化 dev =&gt; 内部 dev ,外部default,内部 default 这样加载</p>
<p>2.4之后 =&gt; 按照之前顺序 先加载外部化 file,再加载内部的classpath文件. 这样只要外面配置了文件就一定会覆盖内部的，会生效。</p>
<h2 id="24的外部化配置还有哪些">2.4的外部化配置还有哪些 ?</h2>
<p>增加了组概念<br>
增加了对容器化等支持<br>
增加了方便的import 导入其他配置文件到environment 之间我们做过类似的事情 =&gt; <a href="https://boommanpro.cn/post/spring-boot-enableConfigurationProperties/">让@EnableConfigurationProperties的值注入到@Value中</a></p>
<h2 id="本质上代码是怎么改的">本质上代码是怎么改的 ?</h2>
<p>原本的配置文件加载类 <code>ConfigFileApplicationListener</code>标记了@Deprecated  favor of =&gt; <code>org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor</code> =&gt; <code>org.springframework.boot.context.config.ConfigDataEnvironment</code></p>
<p>这样就改变了加载策略，从而减少使用困惑(明明配置了外部化文件，为什么会不生效呢?)</p>
]]></content>
    </entry>
</feed>